#!/usr/bin/env python3

"""
Secure replacement for the find command with safety checks.

Safely wrapping the find command is non-trivial, so it's
easier to reimplement its core functionality here.

Requirements:
- MUST NOT support dangerous operations like -exec, -delete, -ok
- MUST validate all inputs for security
- MUST limit resource usage to prevent abuse
- MUST provide clear error messages for blocked operations

Usage: safe-find [path...] [options]
"""

import os
import sys
import argparse
import fnmatch
import stat
import re

# Maximum recursion depth to prevent excessive resource usage
MAX_DEPTH = 50

# Maximum number of files to process
MAX_FILES = 100_000

# Dangerous operations that are explicitly blocked
BLOCKED_OPTIONS = {
    "-exec",
    "-execdir",
    "-delete",
    "-ok",
    "-okdir",
    "-prune",
    "-quit",
    "-fprint",
    "-fprintf",
    "-fls",
    "-printf",
}


def parse_arguments():
    """Parse command line arguments with safety validation."""
    parser = argparse.ArgumentParser(
        description="Secure find replacement, which cannot execute commands or modify files.",
        add_help=False,  # We'll handle help manually to match find behavior
    )

    # Check for blocked operations first
    for arg in sys.argv[1:]:
        if arg in BLOCKED_OPTIONS:
            print(
                f"Error: Option '{arg}' is not supported for security reasons",
                file=sys.stderr,
            )
            print("Supported options:", file=sys.stderr)
            print("  -name PATTERN     Find files matching pattern", file=sys.stderr)
            print("  -iname PATTERN    Case-insensitive name matching", file=sys.stderr)
            print(
                "  -path PATTERN     Full path matches shell pattern", file=sys.stderr
            )
            print(
                "  -ipath PATTERN    Case-insensitive path pattern matching",
                file=sys.stderr,
            )
            print(
                "  -regex PATTERN    Full path matches regular expression",
                file=sys.stderr,
            )
            print(
                "  -iregex PATTERN   Case-insensitive regex path matching",
                file=sys.stderr,
            )
            print(
                "  -type TYPE        File type (f=file, d=directory, l=symlink)",
                file=sys.stderr,
            )
            print("  -maxdepth N       Maximum search depth", file=sys.stderr)
            print("  -mindepth N       Minimum search depth", file=sys.stderr)
            print("  -print            Print results (default)", file=sys.stderr)
            print(
                "  -print0           Print results separated by null bytes",
                file=sys.stderr,
            )
            sys.exit(1)

    # Paths (can be multiple)
    parser.add_argument(
        "paths",
        nargs="+",
        help="Directories to search",
    )

    # Search criteria
    parser.add_argument(
        "-name", dest="name_pattern", help="Base of filename matches pattern"
    )
    parser.add_argument(
        "-iname", dest="iname_pattern", help="Case-insensitive name matching"
    )
    parser.add_argument(
        "-regex", dest="regex_pattern", help="Full path matches regular expression"
    )
    parser.add_argument(
        "-iregex", dest="iregex_pattern", help="Case-insensitive regex path matching"
    )
    parser.add_argument(
        "-path", dest="path_pattern", help="Full path matches shell pattern"
    )
    parser.add_argument(
        "-ipath", dest="ipath_pattern", help="Case-insensitive path pattern matching"
    )
    parser.add_argument(
        "-type",
        choices=["f", "d", "l"],
        help="File type: f=file, d=directory, l=symlink",
    )
    parser.add_argument(
        "-maxdepth",
        type=int,
        default=MAX_DEPTH,
        help=f"Maximum search depth (max: {MAX_DEPTH})",
    )
    parser.add_argument("-mindepth", type=int, default=0, help="Minimum search depth")

    # Output options
    parser.add_argument(
        "-print", action="store_true", default=True, help="Print results (default)"
    )
    parser.add_argument(
        "-print0", action="store_true", help="Print results separated by null bytes"
    )
    parser.add_argument("-help", action="store_true", help="Show this help message")

    args = parser.parse_args()

    if args.help:
        parser.print_help()
        sys.exit(0)

    # Validate depth limits
    if args.maxdepth > MAX_DEPTH:
        print(
            f"Error: Maximum depth limited to {MAX_DEPTH} for security", file=sys.stderr
        )
        sys.exit(1)

    if args.mindepth < 0:
        print("Error: Minimum depth cannot be negative", file=sys.stderr)
        sys.exit(1)

    if args.mindepth > args.maxdepth:
        print("Error: Minimum depth cannot exceed maximum depth", file=sys.stderr)
        sys.exit(1)

    # Validate and normalize paths
    validated_paths = []
    for path in args.paths:
        # Normalize the path to remove redundant separators and resolve .. components
        normalized_path = os.path.normpath(path)

        # Check if path exists
        if not os.path.exists(normalized_path):
            print(f"Error: Path '{path}' does not exist", file=sys.stderr)
            sys.exit(1)

        # Check if path is accessible
        if not os.access(normalized_path, os.R_OK):
            print(f"Error: Path '{path}' is not readable", file=sys.stderr)
            sys.exit(1)

        validated_paths.append(normalized_path)

    args.paths = validated_paths

    return args


def matches_criteria(filepath, filename, file_stat, args, current_depth):
    """Check if file matches all specified criteria."""
    # Check depth constraints
    if current_depth < args.mindepth or current_depth > args.maxdepth:
        return False

    # Check name pattern
    if args.name_pattern and not fnmatch.fnmatch(filename, args.name_pattern):
        return False

    # Check case-insensitive name pattern
    if args.iname_pattern and not fnmatch.fnmatch(
        filename.lower(), args.iname_pattern.lower()
    ):
        return False

    # Check regex pattern
    if args.regex_pattern:
        try:
            if not re.search(args.regex_pattern, filepath):
                return False
        except re.error as e:
            print(
                f"Error: Invalid regex pattern '{args.regex_pattern}': {e}",
                file=sys.stderr,
            )
            sys.exit(1)

    # Check case-insensitive regex pattern
    if args.iregex_pattern:
        try:
            if not re.search(args.iregex_pattern, filepath, re.IGNORECASE):
                return False
        except re.error as e:
            print(
                f"Error: Invalid regex pattern '{args.iregex_pattern}': {e}",
                file=sys.stderr,
            )
            sys.exit(1)

    # Check path pattern
    if args.path_pattern and not fnmatch.fnmatch(filepath, args.path_pattern):
        return False

    # Check case-insensitive path pattern
    if args.ipath_pattern and not fnmatch.fnmatch(
        filepath.lower(), args.ipath_pattern.lower()
    ):
        return False

    # Check file type
    if args.type:
        if args.type == "f" and not stat.S_ISREG(file_stat.st_mode):
            return False
        elif args.type == "d" and not stat.S_ISDIR(file_stat.st_mode):
            return False
        elif args.type == "l" and not stat.S_ISLNK(file_stat.st_mode):
            return False

    return True


def safe_find(args):
    """Main find logic with safety constraints, streaming results to stdout."""
    files_processed = 0
    separator = "\0" if args.print0 else "\n"

    for search_path in args.paths:
        # Normalize the search path for consistent depth calculation
        normalized_search_path = os.path.normpath(os.path.abspath(search_path))

        try:
            for root, dirs, files in os.walk(search_path):
                # Calculate current depth relative to search path
                normalized_root = os.path.normpath(os.path.abspath(root))

                # Calculate depth by counting path separators in the relative path
                if normalized_root == normalized_search_path:
                    current_depth = 0
                else:
                    try:
                        rel_path = os.path.relpath(
                            normalized_root, normalized_search_path
                        )
                        if rel_path.startswith(".."):
                            # Root is outside search path, skip
                            continue
                        current_depth = rel_path.count(os.sep)
                    except ValueError:
                        # Different drives on Windows, skip
                        continue

                # Stop if we exceed max depth
                if current_depth > args.maxdepth:
                    dirs.clear()  # Don't descend further
                    continue

                # Check directory itself if it matches criteria
                try:
                    dir_stat = os.lstat(root)
                    if matches_criteria(
                        root, os.path.basename(root), dir_stat, args, current_depth
                    ):
                        print(root, end=separator)
                        files_processed += 1
                        if files_processed > MAX_FILES:
                            print(
                                f"Error: Too many files (limit: {MAX_FILES})",
                                file=sys.stderr,
                            )
                            sys.exit(1)
                except (OSError, IOError, PermissionError):
                    continue  # Skip inaccessible directories

                # Check files in directory
                for filename in files:
                    filepath = os.path.join(root, filename)
                    try:
                        file_stat = os.lstat(filepath)
                        if matches_criteria(
                            filepath, filename, file_stat, args, current_depth
                        ):
                            print(filepath, end=separator)
                            files_processed += 1
                            if files_processed > MAX_FILES:
                                print(
                                    f"Error: Too many files (limit: {MAX_FILES})",
                                    file=sys.stderr,
                                )
                                sys.exit(1)
                    except (OSError, IOError, PermissionError):
                        continue  # Skip inaccessible files

        except PermissionError as e:
            print(f"Permission denied accessing '{search_path}': {e}", file=sys.stderr)
            continue
        except FileNotFoundError as e:
            print(f"Path not found '{search_path}': {e}", file=sys.stderr)
            continue
        except (OSError, IOError) as e:
            print(f"Error accessing '{search_path}': {e}", file=sys.stderr)
            continue


def main():
    """Main entry point."""
    try:
        args = parse_arguments()
        safe_find(args)
    except KeyboardInterrupt:
        print("\nInterrupted", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
