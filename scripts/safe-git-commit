#!/usr/bin/env bash

# Safe Git Commit
#
# Performs a git commit with security checks:
# - Ensures there are staged changes
# - Rejects commits over 10MB
# - Scans for secrets using gitleaks
#
# Usage: safe-git-commit "your commit message"

set -euo pipefail

if [ $# -ne 1 ]; then
  echo "Error: Exactly one argument (commit message) is required" >&2
  echo "Usage: safe-git-commit \"your commit message\"" >&2
  exit 1
fi

message="$1"
if [ -z "$message" ]; then
  echo "Error: Commit message cannot be empty" >&2
  echo "Usage: safe-git-commit \"your commit message\"" >&2
  exit 1
fi

# Requirement: there MUST be staged changes
if git diff --cached --quiet; then
  echo "Error: No staged changes to commit" >&2
  echo "Use 'git add' to stage files before committing" >&2
  exit 1
fi

# Requirement: staged changes MUST NOT exceed 10MB
max_size=10485760 # 10MB
total_size=$(git diff --cached --numstat | awk '{sum += $1 + $2} END {print sum+0}')
if [ "$total_size" -gt "$max_size" ]; then
  echo "Error: Staged changes exceed maximum size of $max_size bytes" >&2
  exit 1
fi

# Requirement: gitleaks MUST be installed
if ! command -v gitleaks >/dev/null 2>&1; then
  echo "Error: gitleaks is not installed" >&2
  echo "Please run: brew install gitleaks" >&2
  exit 1
fi

# Requirement: staged changes MUST NOT contain secrets
if ! gitleaks protect --staged --verbose; then
  echo "Error: Secrets detected in staged files by gitleaks" >&2
  echo "Please review and remove sensitive information before committing" >&2
  exit 1
fi

git commit -m "$message"
