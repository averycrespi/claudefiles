#!/usr/bin/env bash

# Performs a git push with safety checks.
#
# Requirements:
# - MUST have git installed
# - MUST be in a git repository
# - MUST NOT be in a detached HEAD state
# - MUST NOT push to main or master branches
# - MUST have a remote named origin
# - MUST NOT have untracked files
# - MUST NOT have unstaged changes
# - MUST NOT have staged changes
#
# Usage: safe-git-push

set -euo pipefail

if [ $# -ne 0 ]; then
  echo "Error: Zero arguments expected" >&2
  echo "Usage: safe-git-push" >&2
  exit 1
fi

# Requirement: MUST have git installed
if ! command -v git >/dev/null 2>&1; then
  echo "Error: git is not installed" >&2
  echo "Please STOP and ask the user what to do" >&2
  exit 1
fi

# Requirement: MUST be in a git repository
if ! git rev-parse --git-dir >/dev/null 2>&1; then
  echo "Error: Not in a git repository" >&2
  echo "Please check the directory that you are in with: pwd" >&2
  exit 1
fi

# Requirement: MUST NOT be in a detached HEAD state
if ! git symbolic-ref -q HEAD >/dev/null; then
  echo "Error: Cannot push from detached HEAD state" >&2
  echo "Please STOP and ask the user what to do" >&2
  exit 1
fi

# Requirement: MUST NOT push to main or master branches
current_branch=$(git branch --show-current)
if [ "$current_branch" = "main" ] || [ "$current_branch" = "master" ]; then
  echo "Error: Direct pushes to main or master branch are not allowed" >&2
  echo "Please STOP and ask the user what to do" >&2
  exit 1
fi

# Requirement: MUST have a remote named origin
if ! git remote | grep -q "^origin$"; then
  echo "Error: Remote 'origin' does not exist" >&2
  echo "Please STOP and ask the user what to do" >&2
  exit 1
fi

# Requirement: there MUST NOT be untracked files
if [ -n "$(git ls-files --others --exclude-standard)" ]; then
  echo "Error: Untracked files detected" >&2
  echo "If the files are needed, please stage them with: git add" >&2
  echo "If the files are not needed, please remove them" >&2
  exit 1
fi

# Requirement: there MUST NOT be unstaged changes
if ! git diff --quiet; then
  echo "Error: Unstaged changes detected" >&2
  echo "Please stage and commit the changes with: git add && safe-git-commit" >&2
  exit 1
fi

# Requirement: there MUST NOT be staged changes
if ! git diff --cached --quiet; then
  echo "Error: Staged changes not yet committed" >&2
  echo "Please commit the changes with: safe-git-commit" >&2
  exit 1
fi

git push origin "$current_branch"
