#!/usr/bin/env bash

# Adds a notification to a tmux window.
# This script is idempotent and can safely be run multiple times.
# Unlike other scripts, it must be called from a worktree.
#
# Usage:
#   worktree-notify

set -euo pipefail

# Requirement: must be in a git repository
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  echo "Error: Not in a git repository" >&2
  exit 1
fi

# Requirement: must be in a worktree
if [[ "$(git rev-parse --git-common-dir 2>/dev/null)" == ".git" ]]; then
  echo "Error: This command must be run from a worktree, not the main repository" >&2
  exit 1
fi

worktree_root=$(git rev-parse --show-toplevel)
worktree_name=$(basename "$worktree_root")

# Parse repo and window from REPO-worktree-WINDOW format
if [[ "$worktree_name" =~ ^(.+)-worktree-(.+)$ ]]; then
  repo_name="${BASH_REMATCH[1]}"
  window_name="${BASH_REMATCH[2]}"
else
  echo "Error: Worktree name: $worktree_name doesn't match expected format" >&2
  exit 1
fi

session_name="${repo_name}-worktree"

# Requirement: tmux session must exist
if ! tmux has-session -t "$session_name" 2>/dev/null; then
  echo "Error: tmux session: $session_name does not exist" >&2
  exit 1
fi

# Add notification if the window exists and doesn't already have one
if tmux list-windows -t "$session_name" -F "#{window_name}" 2>/dev/null | grep -q "^ðŸ”” $window_name$"; then
  echo "tmux window: $window_name already has a notification"
elif ! tmux list-windows -t "$session_name" -F "#{window_name}" 2>/dev/null | grep -q "^$window_name$"; then
  echo "Error: tmux window: $window_name does not exist" >&2
  exit 1
else
  echo "Adding notification to tmux window: $window_name"
  tmux rename-window -t "$session_name:$window_name" "ðŸ”” $window_name"
fi
